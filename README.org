
* *CHIME Heralds Imminent Events*

Customizable org notifications for Emacs with visual alerts, audible chimes, and modeline display.

** About

CHIME (backronym: *CHIME Heralds Imminent Events*) provides notification support for your org-agenda events. Get visual notifications, a pleasant chime sound, and see your next upcoming event in your modeline.

This is an updated and maintained fork of the abandoned [[https://github.com/akhramov/org-wild-notifier.el][org-wild-notifier]] project, renamed to CHIME with bug-fixes and new features.

Note: while I've found this package to be quite reliable, it's still undergoing feature development and will be changing frequently. 

** Features

- *Visual notifications* with customizable alert times
- *Audible chime sound* when notifications are displayed
- *Interactive modeline display* of next upcoming event with extensive customization:
  - Enable/disable modeline modifications
  - Hover tooltip showing all upcoming events grouped by day
  - Click to jump directly to event's org entry
  - Customize notification text format (show/hide time, countdown, or title)
  - Choose 12-hour or 24-hour time display
  - Customize time-until format (verbose or compact)
  - Configurable lookahead window and tooltip event limit
- Multiple notification times per event (e.g., 5 minutes before and at event time)
- Works with SCHEDULED and DEADLINE and just plain ol' regular timestamps
- Supports repeating timestamps (=+1w=, =.+1d=, =++1w=)
- Per-event notification customization via properties
- Async background checking (runs every minute)
- Configurable notification filtering by keywords and tags
- [[https://github.com/cjennings/chime.el/tree/main/tests][Well-tested]], including with org-gcal

** Installation

This package is NOT YET available on MELPA.

*** package-vc-install (Emacs 29+)

#+BEGIN_SRC elisp
(unless (package-installed-p 'chime)
  (package-vc-install "https://github.com/cjennings/chime.el"))
#+END_SRC

*** use-package with :vc (Emacs 29+)

#+BEGIN_SRC elisp
(use-package chime
  :vc (:url "https://github.com/cjennings/chime.el" :rev :newest)
  :after alert
  :commands (chime-mode chime-check)
  :bind ("C-c A" . chime-check)
  :config
  ;; Notification times: 5 minutes before and at event time
  (setq chime-alert-time '(5 0))

  ;; Chime sound
  (setq chime-play-sound t)

  ;; Modeline display (see "Modeline Display" section for more options)
  (setq chime-enable-modeline t)
  (setq chime-modeline-lookahead-minutes 60)
  (setq chime-modeline-format " ⏰ %s")

  ;; Notification settings
  (setq chime-notification-title "Reminder")
  (setq chime-alert-severity 'medium)

  ;; Don't filter by TODO keywords - notify for all events
  (setq chime-keyword-whitelist nil)
  (setq chime-keyword-blacklist nil)

  ;; Only notify for non-done items
  (setq chime-predicate-blacklist
        '(chime-done-keywords-predicate))

  ;; Enable chime-mode automatically
  (chime-mode 1))
#+END_SRC

*** Manual Installation (Recommended for Development)

#+BEGIN_SRC elisp
;; Add to load-path
(add-to-list 'load-path "~/path/to/chime.el")

;; Load and configure
(require 'chime)
#+END_SRC

** Quick Start

Minimal configuration:

clone the package somewhere, then add 

#+BEGIN_SRC elisp
  (add-to-list 'load-path  "/path/to/chime.el/")
  (require 'chime)

  ;; Notify 5 minutes before and at event time
  (setq chime-alert-time '(5 0))

  ;; Enable notifications
  (chime-mode 1)
#+END_SRC

** Configuration

*** Polling Interval

Control how often chime checks for upcoming events:

#+BEGIN_SRC elisp
;; Default: check every 60 seconds (1 minute) - recommended for most users
(setq chime-check-interval 60)

;; More responsive: check every 30 seconds
(setq chime-check-interval 30)

;; Reduce polling overhead: check every 5 minutes
(setq chime-check-interval 300)
#+END_SRC

Lower values make notifications more responsive but increase system load. Higher values reduce polling overhead but may delay notifications slightly.

**Choosing a polling interval:**

- *120-300 seconds (2-5 minutes)*: Okay for reducing system load, but most people require more timely notifications. 
- *60 seconds (default)*: Ideal for most users. Matches org's minute-based timestamps and provides timely notifications with minimal overhead.
- *30 seconds*: Fine if you want quicker notification delivery. Reasonable resource usage.
- *15-10 seconds*: Maximum responsiveness, but you're polling 4-6 times more frequently for marginal precision gain on minute-based events.
- *Below 10 seconds*: Not recommended or supported. Org events are scheduled to the minute. Faster polling provides near-zero benefit while significantly increasing CPU, disk I/O, and battery usage.

**Note:** Changes take effect after restarting chime-mode (=M-x chime-mode= twice, or restart Emacs).

*** Alert Times

Set when to receive notifications (in minutes before event):

#+BEGIN_SRC elisp
;; Single notification 10 minutes before
(setq chime-alert-time 10)

;; Multiple notifications: 10 min, 5 min, and at event time
(setq chime-alert-time '(10 5 0))
#+END_SRC

*** Chime Sound

Control the audible chime that plays when notifications appear:

#+BEGIN_SRC elisp
;; Enable/disable chime sound (default: t)
(setq chime-play-sound t)

;; Use custom sound file (defaults to bundled chime.wav)
(setq chime-sound-file "/path/to/your/chime.wav")

;; Disable sound, use system beep instead
(setq chime-sound-file nil)
#+END_SRC

The package includes a pleasant chime sound in GPL-compatible WAV format. You can use your own sound file if preferred.

*** Modeline Display

Display your next upcoming event in your modeline:

#+BEGIN_SRC elisp
;; Enable/disable modeline display (default: t)
(setq chime-enable-modeline t)

;; Show events up to 60 minutes ahead (default: 60)
(setq chime-modeline-lookahead-minutes 60)

;; Customize the modeline prefix format (default: " ⏰ %s")
(setq chime-modeline-format " [Next: %s]")
#+END_SRC

The modeline will display the soonest event within the lookahead window, formatted as:
- Default: =⏰ Meeting with Team at 02:30 PM (in 15 minutes)=
- Updates automatically every minute

**** Interactive Modeline Features

The modeline text is interactive - you can click it and hover for more information:

***** Tooltip

Hover your mouse over the modeline event to see a tooltip showing all upcoming events within the lookahead window, grouped by day:

#+BEGIN_EXAMPLE
Upcoming Events:

Today, Oct 28:
─────────────
Team Meeting at 02:10 PM (in 10 minutes)
Code Review at 02:30 PM (in 30 minutes)
Coffee break at 02:45 PM (in 45 minutes)

Tomorrow, Oct 29:
─────────────
Sprint Planning at 09:00 AM (tomorrow)
Quarterly Review at 02:00 PM (tomorrow)
#+END_EXAMPLE

The tooltip displays up to 5 events by default. Configure the maximum with:

#+BEGIN_SRC elisp
;; Show up to 10 events in tooltip
(setq chime-modeline-tooltip-max-events 10)

;; Show all events in lookahead window (beware -- no limit!)
(setq chime-modeline-tooltip-max-events nil)
#+END_SRC

***** Tooltip Lookahead Window

The tooltip can show events beyond the modeline lookahead window. By default, it shows events up to 1 year (8760 hours) in the future, while the modeline only shows events within the next hour:

#+BEGIN_SRC elisp
;; Modeline shows events within next 60 minutes (default)
(setq chime-modeline-lookahead-minutes 60)

;; Tooltip shows events within next 8760 hours / 1 year (default)
(setq chime-tooltip-lookahead-hours 8760)

;; Example: Show only today's events in tooltip (24 hours)
(setq chime-tooltip-lookahead-hours 24)

;; Example: Show events for the next week in tooltip
(setq chime-tooltip-lookahead-hours 168)  ; 7 days × 24 hours
#+END_SRC

This separation allows you to:
- Keep the modeline focused on imminent events (tactical view)
- See a broader timeline in the tooltip (strategic view)

***** Click to Jump

Left-click the modeline event to jump directly to that event's org entry in its file. This is useful for quickly viewing or editing event details.

**** Customizing Modeline Content

Control what information appears in the modeline with fine-grained formatting:

***** Notification Text Format

Customize which components are shown:

#+BEGIN_SRC elisp
;; Default: title, time, and countdown
(setq chime-notification-text-format "%t at %T (%u)")
;; → "Meeting with Team at 02:30 PM (in 15 minutes)"

;; Title and time only (no countdown)
(setq chime-notification-text-format "%t at %T")
;; → "Meeting with Team at 02:30 PM"

;; Title and countdown only (no time)
(setq chime-notification-text-format "%t (%u)")
;; → "Meeting with Team (in 15 minutes)"

;; Title only (minimal)
(setq chime-notification-text-format "%t")
;; → "Meeting with Team"

;; Custom separator
(setq chime-notification-text-format "%t - %T")
;; → "Meeting with Team - 02:30 PM"

;; Time first
(setq chime-notification-text-format "%T: %t")
;; → "02:30 PM: Meeting with Team"
#+END_SRC

Available placeholders:
- =%t= - Event title
- =%T= - Event time (formatted per =chime-display-time-format-string=)
- =%u= - Time until event (formatted per =chime-time-left-format-*=)

***** Event Time Format

Choose between 12-hour and 24-hour time display:

#+BEGIN_SRC elisp
;; 12-hour with AM/PM (default)
(setq chime-display-time-format-string "%I:%M %p")
;; → "02:30 PM"

;; 24-hour format
(setq chime-display-time-format-string "%H:%M")
;; → "14:30"

;; 12-hour without space before AM/PM
(setq chime-display-time-format-string "%I:%M%p")
;; → "02:30PM"

;; 12-hour with lowercase am/pm
(setq chime-display-time-format-string "%I:%M %P")
;; → "02:30 pm"
#+END_SRC

Available format codes:
- =%I= - Hour (01-12, 12-hour format)
- =%H= - Hour (00-23, 24-hour format)
- =%M= - Minutes (00-59)
- =%p= - AM/PM (uppercase)
- =%P= - am/pm (lowercase)

***** Time-Until Format

Customize how the countdown is displayed:

#+BEGIN_SRC elisp
;; Default: verbose format
(setq chime-time-left-format-short "in %M")      ; Under 1 hour
(setq chime-time-left-format-long "in %H %M")    ; 1 hour or more
;; → "in 10 minutes" or "in 1 hour 30 minutes"

;; Compact format
(setq chime-time-left-format-short "in %mm")
(setq chime-time-left-format-long "in %hh %mm")
;; → "in 10m" or "in 1h 30m"

;; Very compact (no prefix)
(setq chime-time-left-format-short "%mm")
(setq chime-time-left-format-long "%hh%mm")
;; → "10m" or "1h30m"

;; Custom "at event time" message
(setq chime-time-left-format-at-event "NOW!")
;; → "NOW!" instead of "right now"
#+END_SRC

Available format codes (from =format-seconds=):
- =%h= / =%H= - Hours (number only / with unit name)
- =%m= / =%M= - Minutes (number only / with unit name)

***** Title Truncation

Limit the length of long event titles to conserve modeline space:

#+BEGIN_SRC elisp
;; No truncation - show full title (default)
(setq chime-max-title-length nil)
;; → " ⏰ Very Long Meeting Title That Goes On And On ( in 10m)"

;; Truncate to 25 characters
(setq chime-max-title-length 25)
;; → " ⏰ Very Long Meeting Titl... ( in 10m)"

;; Truncate to 15 characters
(setq chime-max-title-length 15)
;; → " ⏰ Very Long Me... ( in 10m)"
#+END_SRC

**Important:** This setting affects *only the event title* (%t), not the icon, time, or countdown. The icon comes from =chime-modeline-format= and is added separately.

The truncation includes the "..." in the character count, so a 15-character limit means up to 12 characters of title plus "...".

Minimum recommended value: 10 characters.

***** Complete Compact Example

For maximum modeline space savings:

#+BEGIN_SRC elisp
(setq chime-enable-modeline t)
(setq chime-modeline-lookahead-minutes 60)
(setq chime-modeline-format " ⏰%s")                    ; Minimal prefix
(setq chime-notification-text-format "%t (%u)")        ; No time shown
(setq chime-time-left-format-short "%mm")              ; Compact short
(setq chime-time-left-format-long "%hh%mm")            ; Compact long
(setq chime-max-title-length 20)                       ; Truncate long titles
;; Result: "⏰Meeting (10m)" or "⏰Very Long Meeti... (1h30m)"
#+END_SRC

***** Disabling Modeline Display

#+BEGIN_SRC elisp
;; Completely disable modeline modifications
(setq chime-enable-modeline nil)

;; Alternative: set lookahead to 0 (legacy method)
(setq chime-modeline-lookahead-minutes 0)
#+END_SRC

*** Notification Settings

#+BEGIN_SRC elisp
;; Notification title
(setq chime-notification-title "Reminder")

;; Notification severity (low, medium, high)
(setq chime-alert-severity 'medium)
#+END_SRC

*** Filtering

#+BEGIN_SRC elisp
;; Only notify for specific TODO keywords
(setq chime-keyword-whitelist '("TODO" "NEXT"))

;; Never notify for these keywords
(setq chime-keyword-blacklist '("DONE" "CANCELLED"))

;; Only notify for specific tags
(setq chime-tags-whitelist '("@important"))

;; Never notify for these tags
(setq chime-tags-blacklist '("someday"))
#+END_SRC

**** Whitelist and Blacklist Precedence

If the same keyword or tag appears in both a whitelist and blacklist, the **blacklist takes precedence** and the item will be filtered out. This ensures sensitive information cannot accidentally be exposed in notifications.

Examples:
- Item with =TODO= keyword when =TODO= is in both ~chime-keyword-whitelist~ and ~chime-keyword-blacklist~ → **filtered out** (blacklist wins)
- Item with =:urgent:= tag when =urgent= is in both ~chime-tags-whitelist~ and ~chime-tags-blacklist~ → **filtered out** (blacklist wins)
- Item with whitelisted keyword but blacklisted tag → **filtered out** (blacklist wins)

Most users configure either whitelists or blacklists, not both. If you use both, ensure they don't overlap to avoid confusion.

*** All-Day Events

Chime distinguishes between *timed events* (with specific times like =10:00=) and *all-day events* (without times, such as birthdays or holidays).

**** What are All-Day Events?

All-day events are org timestamps without a time component:

#+BEGIN_SRC org
,* Blake's Birthday
<2025-12-19 Fri>

,* Holiday: Christmas
<2025-12-25 Thu>

,* Multi-day Conference
<2025-11-10 Mon>--<2025-11-13 Thu>
#+END_SRC

Compare with timed events:

#+BEGIN_SRC org
,* Team Meeting
<2025-10-28 Tue 14:30-15:30>

,* Doctor Appointment
SCHEDULED: <2025-10-30 Thu 10:00>
#+END_SRC

**** Current Behavior

**Modeline:**
- All-day events are *never* shown in the modeline
- Only timed events with specific times appear
- Rationale: Modeline shows urgent, time-sensitive items

**Notifications:**
- All-day events can trigger notifications at configured times
- By default, =chime-day-wide-alert-times= is =nil= (notifications disabled)
- When set, chime will notify you of all-day events happening *today* at those times

**** Configuring All-Day Event Notifications

To receive notifications for all-day events (like birthdays):

#+BEGIN_SRC elisp
;; Notify at 8:00 AM for all-day events happening today
(setq chime-day-wide-alert-times '("08:00"))

;; Multiple notification times
(setq chime-day-wide-alert-times '("08:00" "17:00"))  ; Morning and evening

;; Disable all-day event notifications (default)
(setq chime-day-wide-alert-times nil)
#+END_SRC

**Example workflow:**
1. You have =* Blake's Birthday <2025-12-19 Fri>= in your org file
2. On December 19th at 8:00 AM, chime notifies: "Blake's Birthday is due or scheduled today"
3. This gives you a reminder to send birthday wishes or buy a gift

**** Showing Overdue TODOs

Control whether overdue TODO items and past events appear alongside all-day event notifications:

#+BEGIN_SRC elisp
;; Show overdue items with all-day event notifications (default: t)
(setq chime-show-any-overdue-with-day-wide-alerts t)

;; Only show today's events, not overdue items from past days
(setq chime-show-any-overdue-with-day-wide-alerts nil)
#+END_SRC

**When enabled (default =t=):**
- Shows today's DEADLINE/SCHEDULED tasks that have passed (e.g., 9am deadline when it's now 2pm)
- Shows today's all-day events even if you launch Emacs after the alert time (e.g., launch at 10am when alert was 8am)
- Shows all-day events from past days (e.g., yesterday's birthday, last week's holiday)

**When disabled (=nil=):**
- Shows today's DEADLINE/SCHEDULED tasks that have passed ✓
- Shows today's all-day events even if you launch Emacs late ✓
- Hides all-day events from past days (prevents old birthday/holiday spam) ✓

Most users want the default (=t=) to catch overdue items. Disable it if you only want to see today's events and don't want past birthdays/holidays cluttering notifications.

***** Understanding the Interplay with Alert Times

The relationship between =chime-day-wide-alert-times= and =chime-show-any-overdue-with-day-wide-alerts= can be confusing:

- =chime-day-wide-alert-times= controls **when** notifications fire (e.g., 8:00 AM)
- =chime-show-any-overdue-with-day-wide-alerts= controls **what happens if you miss that time**

**Example scenario:**
#+BEGIN_EXAMPLE
You have:
  (setq chime-day-wide-alert-times '("08:00"))
  (setq chime-show-any-overdue-with-day-wide-alerts t)

Today's birthday: * Blake's Birthday <2025-10-28 Tue>

Timeline:
- 8:00 AM: Chime fires notification "Blake's Birthday is due or scheduled today" ✓
- You close Emacs at 9:00 AM
- You relaunch Emacs at 2:00 PM (afternoon)
- Because overdue alerts are ENABLED (t), chime shows the notification again ✓
  → This catches you up on today's events you might have missed
#+END_EXAMPLE

**If you disable overdue alerts:**
#+BEGIN_EXAMPLE
  (setq chime-show-any-overdue-with-day-wide-alerts nil)

Same scenario, but now:
- 8:00 AM: Chime fires notification ✓
- You close Emacs at 9:00 AM
- You relaunch Emacs at 2:00 PM
- Because overdue alerts are DISABLED (nil), chime STILL shows today's birthday ✓
  → Today's events are always shown regardless of this setting
  → This setting only hides events from PAST DAYS (yesterday, last week, etc.)
#+END_EXAMPLE

**Key insight:** You'll always see today's all-day events when you launch Emacs, even if you missed the configured alert time. The =chime-show-any-overdue-with-day-wide-alerts= setting only controls whether you see events from *previous days*.

**** Common Use Cases

**Birthdays:**
#+BEGIN_SRC org
,* Blake Michael's Birthday
<2025-02-20 Thu>
#+END_SRC

With =chime-day-wide-alert-times= set to ='("08:00")=, you'll get a morning reminder on the birthday.

**Holidays:**
#+BEGIN_SRC org
,* Holiday: Thanksgiving
<2025-11-27 Thu>
#+END_SRC

**Multi-day Events:**
#+BEGIN_SRC org
,* Conference: EmacsCon 2025
<2025-11-10 Mon>--<2025-11-13 Thu>
#+END_SRC

You'll receive notifications on each day of the conference at your configured alert times.

**** Integration with org-contacts

Note: If you use [[https://repo.or.cz/org-contacts.git][org-contacts]] for managing birthdays, be aware that org-contacts uses a special format (=BIRTHDAY= property) that is not directly supported by org-agenda timestamps. You'll need to manually add timestamp entries for birthdays you want notifications for, or use org-contacts' own reminder system.

** Usage

*** Basic Event with Timestamp

#+BEGIN_SRC org
,* Meeting with Team
<2025-10-25 Sat 14:00>
#+END_SRC

Will notify at 14:00 (if =chime-alert-time= includes =0=).

*** Events with SCHEDULED or DEADLINE

#+BEGIN_SRC org
,* TODO Call Doctor
SCHEDULED: <2025-10-25 Sat 10:00>
#+END_SRC

*** Repeating Events

Repeating timestamps are fully supported:

#+BEGIN_SRC org
,* TODO Weekly Team Meeting
SCHEDULED: <2025-10-25 Sat 14:00 +1w>

,* TODO Daily Standup
SCHEDULED: <2025-10-25 Sat 09:00 +1d>

,* TODO Review Email
SCHEDULED: <2025-10-25 Sat 08:00 .+1d>
#+END_SRC

Supported repeaters:
- =+1w= - Repeat weekly from original date
- =.+1d= - Repeat daily from completion
- =++1w= - Repeat weekly from scheduled date

*** Per-Event Notification Times

Override global notification times for specific events:

#+BEGIN_SRC org
,* IMPORTANT Board Meeting
SCHEDULED: <2025-10-25 Sat 14:00>
:PROPERTIES:
:CHIME_NOTIFY_BEFORE: 30 15 5 0
:END:
#+END_SRC

This event will notify at: 30min, 15min, 5min before, and at event time.

** Known Limitations

*** S-expression Diary Entries Are Not Supported

Note: org-contacts users will quickly discover the above unsupported format is how org-contacts integrate birthdays into your calendar. If you use org-contacts, you will not be automatically notified about your contacts birthdays. 

Specifically, this format is *not supported*:

#+BEGIN_SRC org
,* TODO Daily Standup
SCHEDULED: <%%(memq (calendar-day-of-week date) '(1 2 3 4 5))>
#+END_SRC

For those using this format outside of org-contacts, your workaround is to use standard repeating timestamps instead:

#+BEGIN_SRC org
,* TODO Daily Standup
SCHEDULED: <2025-10-24 Fri 09:00 +1d>
#+END_SRC

For Monday-Friday events, you can either:
1. Accept weekend notifications (mark as DONE on weekends)
2. Create 5 separate entries, one for each weekday with =+1w= repeater

** Full Example Configuration

#+BEGIN_SRC elisp
  (use-package chime
    :vc (:url "https://github.com/cjennings/chime.el" :rev :newest)
    :after alert
    :commands (chime-mode chime-check)
    :config
    ;; Polling interval: check every 60 seconds (default)
    (setq chime-check-interval 60)

    ;; Notification times: 5 minutes before and at event time
    (setq chime-alert-time '(5 0))

    ;; Chime sound
    (setq chime-play-sound t)
    ;; Uses bundled chime.wav by default

    ;; Modeline display - compact format
    (setq chime-enable-modeline t)
    (setq chime-modeline-lookahead-minutes 120)                 ; Show events 2 hrs ahead
    (setq chime-modeline-format " ⏰%s")                ; Minimal prefix
    (setq chime-notification-text-format "%t (%u)")    ; Title + countdown only
    (setq chime-display-time-format-string "%H:%M")    ; 24-hour time
    (setq chime-time-left-format-short "in %mm")       ; Compact: "in 5m"
    (setq chime-time-left-format-long "%hh%mm")        ; Compact: "1h30m"
    (setq chime-time-left-format-at-event "NOW!")      ; Custom at-event message

    ;; Notification settings
    (setq chime-notification-title "Reminder")
    (setq chime-alert-severity 'medium)

    ;; Don't filter by TODO keywords - notify for all events
    (setq chime-keyword-whitelist nil)
    (setq chime-keyword-blacklist nil)

    ;; Only notify for non-done items
    (setq chime-predicate-blacklist
          '(chime-done-keywords-predicate))

    ;; Enable chime-mode automatically
    (chime-mode 1))
#+END_SRC

** Manual Check

You can manually trigger a notification check:

#+BEGIN_SRC elisp
M-x chime-check
#+END_SRC

** Troubleshooting

*** No notifications appearing

1. Verify chime-mode is enabled: =M-: chime-mode=
2. Check that alert is configured correctly:
   #+BEGIN_SRC elisp
   (setq alert-default-style 'libnotify)  ; or 'notifications on some systems
   #+END_SRC
3. Manually test: =M-x chime-check=
4. Check =*Messages*= buffer for error messages

*** No sound playing

1. Verify sound is enabled: =M-: chime-play-sound= should return =t=
2. Check sound file exists: =M-: (file-exists-p chime-sound-file)=
3. Test sound directly: =M-: (play-sound-file chime-sound-file)=
4. Ensure your system has audio support configured

*** Events not being detected

1. Ensure files are in =org-agenda-files=
2. Verify timestamps have time components: =<2025-10-25 Sat 14:00>= not =<2025-10-25 Sat>=
3. Check filtering settings (keyword/tag whitelist/blacklist)
4. Timestamps support both 24-hour (=14:00=) and 12-hour (=2:00pm=, =2:00 PM=) formats

*** org-contacts diary sexp errors

If you see errors like "Bad sexp at line 2: (let ((entry) (date '(10 29 2025))) (org-contacts-anniversaries))" in your =*emacs:err*= buffer, this is because chime's async subprocess doesn't have org-contacts loaded.

*Symptoms:*
- No events appear in modeline despite having scheduled items
- =*emacs:err*= buffer shows "Bad sexp" errors for org-contacts
- Errors appear repeatedly (every minute during chime checks)

*Solution 1: Load org-contacts in your config (Recommended)*

Add this to your config BEFORE chime loads:

#+BEGIN_SRC elisp
(require 'org-contacts nil t)  ; Load if available, don't error if missing
#+END_SRC

Chime will automatically load org-contacts in its async subprocess if it's installed.

*Solution 2: Comment out the sexp line*

In your org file (usually =schedule.org=), comment out or remove:

#+BEGIN_SRC org
# %%(org-contacts-anniversaries)
#+END_SRC

*Solution 3: Convert to plain timestamps*

Use the conversion script to generate plain org entries from your contacts:

#+BEGIN_SRC elisp
;; Load the conversion script
(load-file "/path/to/convert-org-contacts-birthdays.el")

;; Convert contacts to plain org entries
M-x convert-contacts-to-file RET ~/birthdays.org RET
#+END_SRC

This creates entries like:

#+BEGIN_SRC org
** John Doe's Birthday
<2026-03-15 Sun +1y>
#+END_SRC

Then add =birthdays.org= to =org-agenda-files= and remove the sexp line.

*Why this happens:*

Org-mode diary sexps like =%%(org-contacts-anniversaries)= are dynamic expressions evaluated during agenda building. Chime runs agenda building in an async subprocess for performance, but that subprocess needs the generating package (org-contacts) loaded. Chime includes org-contacts as a soft dependency, but it must be installed for the sexp to work.

** Requirements

- Emacs 26.1+
- Org-mode 9.0+
- =alert= package
- =dash= package
- =async= package

** Test Suite

CHIME includes a comprehensive, future-proof test suite to ensure reliability and prevent regressions:

- *339 total tests* across 23 test files
  - Fast, isolated unit tests of individual functions
  - Comprehensive integration scenarios using real org-gcal patterns
  - *Dynamic timestamp generation* - tests work regardless of current date
  - No hardcoded dates that expire or cause failures over time

The test suite covers:
- Timestamp parsing and time calculations
- All-day event detection and notifications
- Event filtering (keywords, tags, predicates)
- Tooltip and modeline formatting
- Notification text generation
- Title sanitization and edge cases
- Real-world org-gcal integration scenarios
- Overdue TODO handling and day-wide alerts
- Whitelist/blacklist conflict resolution

*** Running Tests with the Makefile

The =tests/= directory includes a comprehensive Makefile for easy test execution and validation:

**** Run All Tests

#+BEGIN_SRC bash
cd tests
make test
#+END_SRC

This runs all 339 tests across 23 test files. Expected output:

#+BEGIN_EXAMPLE
✓ All dependencies found
Running 339 tests...
Ran 339 tests, 339 results as expected, 0 unexpected
✓ All 339 tests passed!
#+END_EXAMPLE

**** Run Tests for a Specific File

Use fuzzy matching to run tests from a single file:

#+BEGIN_SRC bash
cd tests
make test-file FILE=modeline
#+END_SRC

The =FILE= parameter supports partial matching, so these all work:
- =make test-file FILE=modeline= → runs =test-chime-modeline.el=
- =make test-file FILE=overdue= → runs =test-chime-overdue-todos.el=
- =make test-file FILE=notification-text= → runs =test-chime-notification-text.el=

**** Run a Single Test

Run one specific test by name (uses fuzzy matching):

#+BEGIN_SRC bash
cd tests
make test-one TEST=all-day
#+END_SRC

Examples:
- =make test-one TEST=all-day= → runs first test matching "all-day"
- =make test-one TEST=overdue-disabled= → runs test for overdue disabled behavior
- =make test-one TEST=sanitize-opening-paren= → runs specific sanitization test

**** Syntax Validation

Validate all Emacs Lisp syntax (checks parentheses balance):

#+BEGIN_SRC bash
cd tests
make validate
#+END_SRC

This runs =check-parens= on all 26 =.el= files (23 test files + chime.el + 2 testutil files).

**** Check Test Inventory

See a breakdown of tests by file:

#+BEGIN_SRC bash
cd tests
make count
#+END_SRC

Example output:

#+BEGIN_EXAMPLE
Test Count by File:
──────────────────────────────────────────────
30 tests - test-chime-notification-text.el
30 tests - test-chime-sanitize-title.el
25 tests - test-chime-timestamp-parse.el
...
──────────────────────────────────────────────
Total: 339 tests across 23 files
#+END_EXAMPLE

**** Other Makefile Targets

#+BEGIN_SRC bash
make help           # Show all available targets with descriptions
make check-deps     # Verify required ELPA dependencies are installed
make lint           # Run byte-compilation warnings (optional - requires setup)
#+END_SRC

*** Test Architecture

**** Dynamic Timestamp Generation

Tests use a dynamic timestamp generation system (=testutil-time.el=) that creates timestamps relative to a stable base time:

#+BEGIN_SRC elisp
;; Instead of hardcoded dates:
(encode-time 0 0 14 24 10 2025)  ; Fails after Oct 2025

;; Tests use dynamic generation:
(test-time-today-at 14 0)        ; Always works
(test-time-tomorrow-at 9 0)      ; Relative to stable base
(test-time-days-from-now 7)      ; 7 days from base time
#+END_SRC

This ensures:
- Tests never expire or fail due to date changes
- Time relationships remain consistent
- Tests can run in any year without modification
- Easier to understand test intent ("tomorrow at 9am" vs "2025-10-25 09:00")

**** Time Mocking

Tests use =with-test-time= macro to mock =current-time= for deterministic testing:

#+BEGIN_SRC elisp
(let ((now (test-time-today-at 14 0))
      (event-time (test-time-today-at 14 30)))
  (with-test-time now
    ;; Inside this block, current-time returns our mocked "now"
    ;; Event is 30 minutes in the future
    (should (chime--should-notify-p event-time 30))))
#+END_SRC

**** Validation Infrastructure

The test suite includes validation to prevent syntax errors:

**Git Pre-commit Hook:**
Automatically validates syntax before each commit:
- Runs =check-parens= on all staged =.el= files
- Blocks commits with syntax errors
- Can be bypassed with =--no-verify= if needed

**Makefile Integration:**
- =make validate= - Quick syntax check (no external dependencies)
- =make lint= - Comprehensive linting (requires =elisp-lint= setup)

*** Running Tests Manually

If you prefer not to use the Makefile:

#+BEGIN_SRC bash
cd tests

# Run all tests
emacs --batch -Q \
  -L . \
  -L ~/.emacs.d/elpa/dash-2.20.0 \
  -L ~/.emacs.d/elpa/alert-20240105.2046 \
  -L ~/.emacs.d/elpa/async-20250107.2200 \
  --eval '(dolist (f (directory-files "." t "^test-.*\\.el$")) (load f))' \
  --eval '(ert-run-tests-batch-and-exit)'

# Run one test file
emacs --batch -Q -L . -L /path/to/deps \
  -l test-chime-modeline.el \
  -f ert-run-tests-batch-and-exit
#+END_SRC

**Note:** The Makefile is recommended as it automatically finds your ELPA dependencies and provides better output formatting.

** License

GPL-3.0

** Credits

All credit and thanks should go to Artem Khramov for his work on [[https://github.com/akhramov/org-wild-notifier.el][org-wild-notifier]], which served me well for some time. Sadly, the author deprecated org-wild-notifier on Aug 2, 2025 in favor of [[https://github.com/spegoraro/org-alert][org-alert]]. I begain fixing bugs and enhancing the feature set into what is now CHIME. 

I plan to maintain this in appreciation and gratitude of Artem's work, and for the larger Emacs community. 

** Migration from org-wild-notifier

If you're migrating from org-wild-notifier, you'll need to update your configuration:

1. Change package name:
   - =(require 'org-wild-notifier)= → =(require 'chime)=

2. Update all configured variable names:
   - =org-wild-notifier-*= → =chime-*=

3. Update configured function names:
   - =org-wild-notifier-mode= → =chime-mode=
   - =org-wild-notifier-check= → =chime-check=

4. Update property names in your org files:
   - =:WILD_NOTIFIER_NOTIFY_BEFORE:= → =:CHIME_NOTIFY_BEFORE:=

** Development

*** Running Tests

Chime uses ERT for testing with a Makefile for convenient test execution.

**** Run all tests:
#+BEGIN_SRC bash
make test
#+END_SRC

**** Run unit tests only:
#+BEGIN_SRC bash
make test-unit
#+END_SRC

**** Run integration tests only:
#+BEGIN_SRC bash
make test-integration
#+END_SRC

**** Run a specific test file:
#+BEGIN_SRC bash
make test-file FILE=test-chime-notify.el
#+END_SRC

**** Run a specific test by name:
#+BEGIN_SRC bash
make test-name TEST=test-chime-check-early-return-on-validation-failure
#+END_SRC

**** Use a specific Emacs version:
#+BEGIN_SRC bash
make EMACS=emacs29 test
#+END_SRC

For more options, run =make help=.

